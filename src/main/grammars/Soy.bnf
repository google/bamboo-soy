{
  parserClass="com.google.bamboo.soy.parser.SoyParser"
  parserUtilClass="com.google.bamboo.soy.parser.SoyParserUtil"
  parserImports=["static com.intellij.lang.WhitespacesBinders.*"]

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Soy"
  psiImplClassSuffix="Impl"
  psiPackage="com.google.bamboo.soy.parser"
  psiImplPackage="com.google.bamboo.soy.parser.impl"

  elementTypeHolderClass="com.google.bamboo.soy.parser.SoyTypes"
  elementTypeClass="com.google.bamboo.soy.parser.SoyElementType"
  tokenTypeClass="com.google.bamboo.soy.lexer.SoyTokenType"

  implements("Begin.*|.*Tag|(Namespace|Alias|DelegatePackage)Block")="com.google.bamboo.soy.elements.TagElement"
  implements("(LetSingle|SpecialCharacter|Print)Statement")
      = ["com.google.bamboo.soy.elements.StatementElement" "com.google.bamboo.soy.elements.TagElement"]
  implements("LiteralStatement") = ["com.google.bamboo.soy.elements.StatementElement"]
  implements("(Call|Choice|For|Foreach|If|LetCompound|Msg|Velog)Statement")
      = ["com.google.bamboo.soy.elements.StatementElement" "com.google.bamboo.soy.elements.TagBlockElement"]

  extends(".*Expr|VariableReferenceIdentifier")=Expr
  consumeTokenMethod(".*Expr")="consumeTokenFast"

  tokens = [
    ALIAS = "alias"
    AMP_AMP = "&&"
    AND = "and"
    AS = "as"
    AT_PARAM = "@param"
    AT_PARAM_OPT = "@param?"
    AT_STATE = "@state"
    AT_INJECT = "@inject"
    AT_INJECT_OPT = "@inject?"
    BOOL_LITERAL = "regexp:false|true"
    NULL_LITERAL = "null"
    CALL = "call"
    CARRIAGE_RETURN = "\\r"
    CASE = "case"
    COLON = ":"
    COLON_EQUAL = ":="
    COMMA = ","
    CSS="css"
    DEFAULT = "default"
    DELCALL = "delcall"
    DELPACKAGE = "delpackage"
    DELTEMPLATE = "deltemplate"
    DOLLAR = "$"
    DOT = "."
    DOT_NULL_CHECK = "?."
    ELEMENT = "element"
    ELSE = "else"
    ELSEIF = "elseif"
    EQUAL = "="
    EQUAL_EQUAL = "=="
    EXCLAMATION = "!"
    FALLBACKMSG = "fallbackmsg"
    FOR = "for"
    FOREACH = "foreach"
    FROM = "from"
    GREATER = ">"
    GREATER_EQUAL = ">="
    IF = "if"
    IFEMPTY = "ifempty"
    IMPORT_OPEN = "import"
    IN = "in"
    INDEX_NULL_CHECK = "?["
    KEY = "key"
    LB = "lb"
    LBRACE = "{"
    LBRACE_LBRACE = "{{"
    LBRACE_SLASH = "{/"
    LBRACE_LBRACE_SLASH = "{{/"
    LESS = "<"
    LESS_EQUAL = "<="
    LET = "let"
    LITERAL = "{literal}"
    MINUS = "-"
    MSG = "msg"
    NAMESPACE = "namespace"
    NBSP = "nbsp"
    NEWLINE_LITERAL = "\\n"
    NIL = "nil"
    NOT = "not"
    NOT_EQUAL = "!="
    OR = "or"
    PARAM = "param"
    PARENS_CLOSE = ")"
    PARENS_OPEN = "("
    PERCENT = "%"
    PIPE = "|"
    PIPE_PIPE = "||"
    PLURAL = "plural"
    PLUS = "+"
    PRINT = "print"
    QUESTIONMARK = "?"
    RB = "rb"
    RBRACE = "}"
    RBRACE_RBRACE = "}}"
    RECORD = "record"
    SELECT = "select"
    SEMICOLON = ";"
    SKIP = "skip"
    SLASH = "/"
    SLASH_RBRACE = "/}"
    SLASH_RBRACE_RBRACE = "/}}"
    SP = "sp"
    SQUARE_CLOSE = "]"
    SQUARE_OPEN = "["
    STAR = "*"
    SWITCH = "switch"
    TAB = "\\t"
    TEMPLATE = "template"
    TERNARY_COALESCER = "?:"
    TESTING_WHITESPACE = "regexp:[ \n\t\r\f]+"
    VELOG = "velog"
    XID = "xid"

    /* Types */
    ANY = "any"
    STRING = "string"
    BOOL = "bool"
    INT = "int"
    FLOAT = "float"
    NUMBER = "number"
    HTML = "html"
    URI = "uri"
    JS = "js"
    ATTRIBUTES = "attributes"
    LIST = "list"
    MAP = "map"

    DOC_COMMENT_BLOCK = "regexp:(/\**([^*]|(\*+[^*/]))*(\*+/))"
    COMMENT_BLOCK = "regexp:(/\*([^*]|(\*+[^*/]))*(\*+/))"
    LINE_COMMENT = "regexp:(//[^\r\n]*)"
    HTML_COMMENT ="regexp:<!--([^\r\n]|(\r|\n|\r\n))*?-->"

    IDENTIFIER_WORD = "regexp:[a-zA-Z_]([a-zA-Z_0-9])*"
    QUALIFIED_IDENTIFIER = "regexp:\.?[a-zA-Z_]([a-zA-Z_0-9])(\.[a-zA-Z_]([a-zA-Z_0-9]))*"

    STRING_LITERAL = "regexp:'([^\r\n'\\]|\\.)*'"
    MULTI_LINE_STRING_LITERAL = "regexp:'([^'\\]|\\([^]))*'"

    INTEGER_LITERAL = "regexp:[0-9]+"
    FLOAT_LITERAL = "regexp:([0-9]+\.[0-9]+(e((\+|-)?[0-9]+))?)|([0-9]+(e((\+|-)?[0-9]+))?)"

    OTHER = "regexp:."
  ]

  extendedPin = false
}


// Root rule

FileInput ::= BlockList



///////////////////////////////////////////////////////////////////////////////////////////////////
// Identifiers
///////////////////////////////////////////////////////////////////////////////////////////////////

private KeywordsAllowedInIdentifiers ::=
    ANY | AS | ATTRIBUTES | BOOL | CSS | FLOAT | HTML | INT | JS | LB | LIST |
    MAP | MSG | NBSP | NIL | NUMBER | PLURAL | RB | SKIP | SP | STRING | URI | XID

// A single identifier token: foo, bar, any, int
private PlainIdentifier ::= IDENTIFIER_WORD | KeywordsAllowedInIdentifiers {
  mixin = "com.google.bamboo.soy.elements.impl.SoyIdentifierMixin"
}

// A variable reference: $foo, $bar, $template
private VariableIdentifier ::= DOLLAR IDENTIFIER_WORD {
  pin = 1;
}

// A sequence of tokens representing namespace, template or function id: my.name.space, .template
private QualifiedIdentifier ::= QUALIFIED_IDENTIFIER

TemplateDefinitionIdentifier ::= QualifiedIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.TemplateDefinitionMixin"
  implements="com.google.bamboo.soy.elements.TemplateDefinitionElement"
  stubClass = "com.google.bamboo.soy.stubs.TemplateDefinitionStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
}

TemplateReferenceIdentifier ::= QualifiedIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.IdentifierMixin"
  implements="com.google.bamboo.soy.elements.IdentifierElement"
}

VariableReferenceIdentifier ::= VariableIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.SoyIdentifierMixin"
  implements="com.google.bamboo.soy.elements.IdentifierElement"
}

VariableDefinitionIdentifier ::= VariableIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.VariableDefinitionMixin"
  implements="com.google.bamboo.soy.elements.VariableDefinitionElement"
}

ParamDefinitionIdentifier ::= PlainIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.ParamDefinitionMixin"
  implements="com.google.bamboo.soy.elements.VariableDefinitionElement"
 }

ParamSpecificationIdentifier ::= PlainIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.ParamIdentifierMixin"
  implements="com.google.bamboo.soy.elements.ParamIdentifierElement"
}

NamespaceDeclarationIdentifier ::= QualifiedIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.NamespaceDeclarationMixin"
  implements="com.google.bamboo.soy.elements.NamespaceDeclarationElement"
  stubClass = "com.google.bamboo.soy.stubs.NamespaceDeclarationStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
}

NamespaceIdentifier ::= QualifiedIdentifier

AliasIdentifier ::= PlainIdentifier

TypeIdentifier ::= PlainIdentifier (DOT PlainIdentifier)*

PackageIdentifier ::= QualifiedIdentifier

FieldIdentifier ::= PlainIdentifier

AttributeNameIdentifier ::= PlainIdentifier

FunctionIdentifier ::= PlainIdentifier (DOT PlainIdentifier)*


///////////////////////////////////////////////////////////////////////////////////////////////////
// Literals and types
///////////////////////////////////////////////////////////////////////////////////////////////////

// Literals

private NumberLiteral ::= INTEGER_LITERAL | FLOAT_LITERAL | DOT FLOAT_LITERAL

AnyStringLiteral ::= STRING_LITERAL | MULTI_LINE_STRING_LITERAL {
  mixin="com.google.bamboo.soy.elements.impl.IdentifierMixin"
  implements="com.google.bamboo.soy.elements.IdentifierElement"
}

// Types

TypeExpression ::= UnionType | CompoundType | PrimitiveType

PrimitiveType
  ::=
    ANY | STRING | BOOL | INT | FLOAT | NUMBER | HTML | NULL_LITERAL | QUESTIONMARK |
    URI | JS | ATTRIBUTES | TypeIdentifier

CompoundType ::= ListType | MapType | RecordType

ListType ::= LIST LESS TypeExpression GREATER {
  pin = 2
}

MapType ::= MAP LESS TypeExpression COMMA TypeExpression GREATER {
  pin = 2
}

UnionType ::= (CompoundType | PrimitiveType) PIPE TypeExpression {
  pin = 2
}

RecordType ::= SQUARE_OPEN RecordTypeField (COMMA RecordTypeField)* SQUARE_CLOSE {
  pin = 1
}

RecordTypeField ::= FieldIdentifier COLON TypeExpression {
  pin = 2
}

// Attribute lists

private AttributeList ::= AttributeKeyValuePair+

AttributeKeyValuePair ::= AttributeNameIdentifier EQUAL AnyStringLiteral {
  pin = 2
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Tags
///////////////////////////////////////////////////////////////////////////////////////////////////

private Brace ::= LBRACE | LBRACE_LBRACE | LBRACE_SLASH | LBRACE_LBRACE_SLASH | RBRACE | RBRACE_RBRACE | SLASH_RBRACE | SLASH_RBRACE_RBRACE
private recoverEndOfTag ::= !(Brace | LITERAL | LITERAL_DOUBLE)
private recoverEndOfImport ::= !(IMPORT_OPEN | LBRACE | LBRACE_SLASH | LBRACE_LBRACE | LBRACE_LBRACE_SLASH | LITERAL | LITERAL_DOUBLE)
private meta BracedTag ::= <<ClosedBracedTag <<p>>>> | <<OpenBracedTag <<p>>>>
private meta ClosedBracedTag ::= (LBRACE | LBRACE_LBRACE) <<p>> (SLASH_RBRACE | SLASH_RBRACE_RBRACE)

private meta OpenBracedTag ::= <<OpenTagInner <<p>>>> (RBRACE | RBRACE_RBRACE) {
  pin = 1
}
private meta OpenTagInner ::= (LBRACE | LBRACE_LBRACE) <<p>> {
  recoverWhile = "recoverEndOfTag"
}

meta EndTag ::= <<EndTag_<<p>>>>
private meta EndTag_ ::= <<EndTagInner <<p>>>> (RBRACE | RBRACE_RBRACE) {
  pin = 1
}
private meta EndTagInner ::= (LBRACE_SLASH | LBRACE_LBRACE_SLASH) <<p>> {
  recoverWhile = "recoverEndOfTag"
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Top-level blocks
///////////////////////////////////////////////////////////////////////////////////////////////////

// Expanding on soy's hierarchical structure follows.

BlockList ::= (Block | Import | OTHER | COMMENT_BLOCK | HTML_COMMENT)*

private Block ::= NamespaceBlock | AliasBlock | TemplateBlock | DelegatePackageBlock | CatchallBraces

CatchallBraces ::= <<BracedTag ()>> | <<EndTag_ ()>>


// Import

Import ::= IMPORT_OPEN LBRACE ImportedSymbol (COMMA ImportedSymbol)* RBRACE FROM STRING_LITERAL SEMICOLON {
  pin = 1
  recoverWhile = "recoverEndOfImport"
}

private ImportedSymbol ::= IDENTIFIER_WORD [ AS IDENTIFIER_WORD ]

// Namespace block

NamespaceBlock ::= <<BracedTag NamespaceTagBody>>

private NamespaceTagBody ::= NAMESPACE NamespaceDeclarationIdentifier [AttributeList] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}


// Alias block

AliasBlock ::= <<BracedTag AliasBody>>

private AliasBody ::= ALIAS NamespaceIdentifier [AS AliasIdentifier] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}


// Template block

TemplateBlock ::= LocalTemplateBlock | DelegateTemplateBlock | LocalElementBlock {
  mixin="com.google.bamboo.soy.elements.impl.TemplateBlockMixin"
  implements="com.google.bamboo.soy.elements.TemplateBlockElement"
  stubClass = "com.google.bamboo.soy.stubs.TemplateBlockStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
}

private LocalElementBlock ::= <<AbstractTemplateBlock ELEMENT>>
private LocalTemplateBlock ::= <<AbstractTemplateBlock TEMPLATE>>
private DelegateTemplateBlock ::= <<AbstractTemplateBlock DELTEMPLATE>>

private meta AbstractTemplateBlock ::=
    <<BeginTemplate <<p>>>>
    [AtParamOrStateList]
    [<<StatementList !()>>]
    <<EndTag <<p>>>> {
  pin = 1
}

meta BeginTemplate ::= <<BracedTag <<BeginTemplateBody<<p>>>>>> {
  hooks = [wsBinders = "LEADING_COMMENTS_BINDER, TRAILING_COMMENTS_BINDER"]
}

private meta BeginTemplateBody ::= <<p>> (TemplateDefinitionIdentifier [AttributeList] | AttributeList) {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

private AtParamOrStateList ::= (AtParamSingle | AtInjectSingle | AtStateSingle)+

AtParamSingle ::= <<BracedTag AtParamBody>> {
  implements = "com.google.bamboo.soy.elements.AtParamElement"
  mixin = "com.google.bamboo.soy.elements.impl.AtParamMixin"
  stubClass = "com.google.bamboo.soy.stubs.AtParamStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
  hooks = [wsBinders = "LEADING_COMMENTS_BINDER, TRAILING_COMMENTS_BINDER"]
}

private AtParamBody ::= (AT_PARAM | AT_PARAM_OPT) ParamDefinitionIdentifier ((COLON TypeExpression [EQUAL Expr]) | COLON_EQUAL Expr) {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

AtStateSingle ::= <<BracedTag AtStateBody>> {
  implements = "com.google.bamboo.soy.elements.AtStateElement"
  mixin = "com.google.bamboo.soy.elements.impl.AtStateMixin"
  stubClass = "com.google.bamboo.soy.stubs.AtStateStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
  hooks = [wsBinders = "LEADING_COMMENTS_BINDER, TRAILING_COMMENTS_BINDER"]
}

private AtStateBody ::= (AT_STATE) ParamDefinitionIdentifier (COLON TypeExpression EQUAL Expr | COLON_EQUAL Expr) {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

AtInjectSingle ::= <<BracedTag AtInjectBody>> {
  implements = "com.google.bamboo.soy.elements.AtInjectElement"
  mixin = "com.google.bamboo.soy.elements.impl.AtInjectMixin"
  hooks = [wsBinders = "LEADING_COMMENTS_BINDER, TRAILING_COMMENTS_BINDER"]
}

private AtInjectBody ::= (AT_INJECT | AT_INJECT_OPT) ParamDefinitionIdentifier COLON TypeExpression {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}


// DelPackage block

DelegatePackageBlock ::= <<BracedTag DelegatePackageTagBody>>

private DelegatePackageTagBody ::= DELPACKAGE PackageIdentifier {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Statements
///////////////////////////////////////////////////////////////////////////////////////////////////

external endOfStatementBlock ::= parseEndOfStatementBlock

meta StatementList ::= (Statement | !(<<p>> | endOfStatementBlock) CatchallBraces)* {
  recoverWhile = "!(<<p>> | endOfStatementBlock)"
  implements = "com.google.bamboo.soy.elements.StatementListElement"
  hooks = [wsBinders = "GREEDY_LEFT_BINDER, GREEDY_RIGHT_BINDER"]
}

// ! It is very important to have the following structure
// StatementList
// |- OTHER
// |- Some other statement
// for the formatter to work, see SoyFormattingModelBuilder
//
// Please do not change the visibility of these rules, unless you are sure
// what you are doing.

private Content ::= OTHER

private Statement ::=
    SingleTagStatement
  |
    BlockTagStatement
  |
    PrintStatement
  |
    Content


private SingleTagStatement ::=
    LetSingleStatement
  |
    SkipStatement
  |
    KeyStatement
  |
    SpecialCharacterStatement


private BlockTagStatement ::=
    CallStatement
  |
    ChoiceStatement
  |
    ForStatement
  |
    ForeachStatement
  |
    IfStatement
  |
    LetCompoundStatement
  |
    LiteralStatement
  |
    MsgStatement
  |
    VelogStatement


// Same as StatementList but cannot empty.
meta UnexpectedStatements ::= (Statement | !(<<p>> | endOfStatementBlock) CatchallBraces)+ {
  recoverWhile = "!(<<p>> | endOfStatementBlock)"
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Simple block statements
///////////////////////////////////////////////////////////////////////////////////////////////////

// If

IfStatement
  ::=
    BeginIf
    <<StatementList (ElseTag | BeginElseIf)>>
    ElseIfClause*
    [ElseTag <<StatementList !()>>]
    <<EndTag IF>> {
  pin = 1
}

BeginIf ::= <<BracedTag BeginIfTagBody>>

private BeginIfTagBody ::= IF Expr {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

private ElseIfClause ::= BeginElseIf <<StatementList (ElseTag | BeginElseIf)>> {
  pin = 1
}

BeginElseIf ::= <<BracedTag BeginElseIfTagBody>>

private BeginElseIfTagBody ::= ELSEIF Expr {
  pin = 1
}

ElseTag ::= <<BracedTag ELSE>>

// For

ForStatement
  ::= BeginFor
    <<StatementList (IfEmptyTag)>>
    [IfEmptyTag <<StatementList !()>>]
    <<EndTag FOR>> {
  pin = 1
  implements = "com.google.bamboo.soy.elements.ForStatementElement"
}

BeginFor ::= <<BracedTag BeginForTagBody>>

private BeginForTagBody ::= FOR VariableDefinitionIdentifier IN Expr {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Foreach

ForeachStatement
  ::=
    BeginForeach
    <<StatementList (IfEmptyTag)>>
    [IfEmptyTag <<StatementList !()>>]
    <<EndTag FOREACH>> {
  pin = 1
  implements = "com.google.bamboo.soy.elements.ForeachStatementElement"
}

IfEmptyTag ::= <<BracedTag IFEMPTY>>

BeginForeach ::= <<BracedTag BeginForeachTagBody>>

private BeginForeachTagBody ::= FOREACH VariableDefinitionIdentifier IN Expr {
  pin = 1
}

// Let (compound)

LetCompoundStatement ::= BeginLet <<StatementList !()>> <<EndTag LET>> {
  pin = 1
}

BeginLet ::= <<BracedTag BeginLetTagBody>> {
  hooks=[wsBinders="LEADING_COMMENTS_BINDER, TRAILING_COMMENTS_BINDER"]
}

private BeginLetTagBody ::= LET VariableDefinitionIdentifier [AttributeKeyValuePair] {
  pin = 1
}

// Msg

MsgStatement
  ::=
    BeginMsg
    <<StatementList (FallbackMsgTag)>>
    [FallbackMsgTag <<StatementList !()>>]
    <<EndTag MSG>> {
  pin = 1
  implements="com.google.bamboo.soy.elements.MsgStatementElement"
}

BeginMsg ::= <<BracedTag BeginMsgTagBody>>

private BeginMsgTagBody ::= MSG AttributeList {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

FallbackMsgTag ::= <<BracedTag FallbackMsgTagBody>>

private FallbackMsgTagBody ::= FALLBACKMSG AttributeList {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Velog

VelogStatement ::=
    BeginVelog
    [<<StatementList !()>>]
    <<EndTag VELOG>>

BeginVelog ::= <<BracedTag BeginVelogTagBody>>

private BeginVelogTagBody ::= VELOG Expr [AttributeList] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// Call statements
///////////////////////////////////////////////////////////////////////////////////////////////////


private CallStatement ::= DirectCallStatement | DelCallStatement

DirectCallStatement ::= <<AbstractCallStatement CALL>> {
  implements="com.google.bamboo.soy.elements.CallStatementElement"
}

DelCallStatement ::= <<AbstractCallStatement DELCALL>> {
  implements="com.google.bamboo.soy.elements.CallStatementElement"
}

private meta AbstractCallStatement ::=
    !(<<ClosedBeginCall <<p>>>>) <<AbstractCallStatementBlock <<p>>>>
  | <<BeginCall <<p>>>>
private meta AbstractCallStatementBlock ::= <<BeginCall <<p>>>> ParamList <<EndTag <<p>>>> {
   pin = 1
}
meta BeginCall ::= <<BracedTag <<CallTagBody <<p>>>>>>

private meta ClosedBeginCall ::= <<ClosedBracedTag <<CallTagBody <<p>>>> >>
private meta CallTagBody ::= <<p>> (TemplateReferenceIdentifier [AttributeList] | AttributeList) {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// ParamList
private ParamList ::=
  (ParamListElement | <<UnexpectedStatements (BeginParamTag)>>)*
  // StatementList can only be empty and exists to consume whitespace.
  <<StatementList (BeginParamTag)>> {
  recoverWhile = "!(endOfStatementBlock)"
}

ParamListElement ::= !(<<ClosedBracedTag BeginParamTagBody>>) BlockParamListElement | BeginParamTag {
  implements = "com.google.bamboo.soy.elements.ParamElement"
}

private BlockParamListElement ::= BeginParamTag <<StatementList (BeginParamTag)>> <<EndTag PARAM>> {
  pin = 1
}

BeginParamTag ::= <<BracedTag BeginParamTagBody>>

private BeginParamTagBody ::= PARAM (ParamSpecificationIdentifier COLON Expr | AttributeList | ParamSpecificationIdentifier [AttributeList]) {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Choice statements
///////////////////////////////////////////////////////////////////////////////////////////////////


private ChoiceStatement ::= SwitchStatement | SelectStatement | PluralStatement

SwitchStatement ::= <<AbstractChoiceStatement SWITCH>> {
  implements = "com.google.bamboo.soy.elements.ChoiceStatementElement"
}

SelectStatement ::= <<AbstractChoiceStatement SELECT>> {
  implements = "com.google.bamboo.soy.elements.ChoiceStatementElement"
}

PluralStatement ::= <<AbstractChoiceStatement PLURAL>> {
 implements = "com.google.bamboo.soy.elements.ChoiceStatementElement"
}

private meta AbstractChoiceStatement ::=
    <<BeginChoice <<p>>>>
    ChoiceClausesList
    <<EndTag <<p>>>> {
  pin = 1
}

meta BeginChoice ::= <<BracedTag <<AbstractBeginChoiceStatementBody <<p>>>>>>
private meta AbstractBeginChoiceStatementBody ::= <<p>> Expr [AttributeKeyValuePair] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Case and default clauses

// Statements are only "unexpected" before the first {case} or {default} tag. After that they are
// consumed by the appropriate *Clause rule.

private ChoiceClausesList
  ::=
    [<<UnexpectedStatements (BeginChoiceClause)>>]
    (ChoiceClause)*
    // StatementList can only be empty and exists to consume whitespace.
    <<StatementList (BeginChoiceClause)>>

ChoiceClause ::= BeginChoiceClause <<StatementList (BeginChoiceClause)>> {
  pin = 1
  implements = "com.google.bamboo.soy.elements.ChoiceClauseElement"
}

BeginChoiceClause ::= <<BracedTag BeginCaseClauseTagBody>> | <<BracedTag DEFAULT>>

private BeginCaseClauseTagBody ::= CASE CommaSeparatedExpressionList {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}


///////////////////////////////////////////////////////////////////////////////////////////////////
// Single tag statements.
///////////////////////////////////////////////////////////////////////////////////////////////////

// Let statement

LetSingleStatement ::= <<BracedTag LetSingleTagBody>> {
  hooks = [wsBinders = "LEADING_COMMENTS_BINDER, TRAILING_COMMENTS_BINDER"]
}

private LetSingleTagBody ::= LET VariableDefinitionIdentifier COLON Expr {
  pin = 3
  recoverWhile = "recoverEndOfTag"
}

// Skip statement

SkipStatement ::= <<BracedTag SKIP>>

// Key statement

KeyStatement ::= <<BracedTag KeyBody>>

private KeyBody ::= KEY Expr {
  pin = 1
}

// Special character statement

SpecialCharacterStatement ::=
    <<BracedTag LB>>
  | <<BracedTag NBSP>>
  | <<BracedTag NIL>>
  | <<BracedTag RB>>
  | <<BracedTag SP>>
  | <<BracedTag TAB>>
  | <<BracedTag NEWLINE_LITERAL>>
  | <<BracedTag CARRIAGE_RETURN>>

// Literal statement

LiteralStatement ::= (LITERAL Content? END_LITERAL) | (LITERAL_DOUBLE Content? END_LITERAL_DOUBLE)


///////////////////////////////////////////////////////////////////////////////////////////////////
// Print statement
///////////////////////////////////////////////////////////////////////////////////////////////////


PrintStatement ::= <<BracedTag PrintBody>>

private PrintBody ::= ImplicitPrintBody | ExplicitPrintBody

private ExplicitPrintBody ::= PRINT Expr [PIPE DirectiveList] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

private ImplicitPrintBody ::= Expr [PIPE DirectiveList] [AttributeKeyValuePair]

private DirectiveList ::= Directive (PIPE Directive)*

CommaSeparatedExpressionList ::= Expr (COMMA Expr)*
Directive ::= FunctionIdentifier [COLON CommaSeparatedExpressionList]

KeyValue ::= Expr COLON Expr
CommaSeparatedKeyValueList ::= KeyValue (COMMA KeyValue)*

RecordFieldValue ::= FieldIdentifier COLON Expr
CommaSeparatedRecordFieldValueList ::= RecordFieldValue (COMMA RecordFieldValue)*

///////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////////////////////////

// https://developers.google.com/closure/templates/docs/concepts#expressions
// https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities
Expr ::= NullCheckTernaryExpr
  | NullCheckBinExpr
  | OrBinExpr
  | AndBinExpr
  | BoolOrBinExpr
  | BoolAndBinExpr
  | CompBinExpr
  | RelCompBinExpr
  | AddBinExpr
  | MulBinExpr
  | UnaryExpr
  | ItemAccessExpr
  | FieldAccessExpr
  | PrimaryExpr

NullCheckTernaryExpr ::= Expr NullCheckTernaryQmark Expr NullCheckTernaryColon Expr { rightAssociative=true }
NullCheckTernaryQmark ::= QUESTIONMARK
NullCheckTernaryColon ::= COLON
NullCheckBinExpr ::= Expr TERNARY_COALESCER Expr
OrBinExpr ::= Expr OR Expr
AndBinExpr ::= Expr AND Expr
BoolOrBinExpr ::= Expr PIPE_PIPE Expr
BoolAndBinExpr ::= Expr AMP_AMP Expr
CompBinExpr ::= Expr (EQUAL_EQUAL | NOT_EQUAL) Expr
RelCompBinExpr ::= Expr (GREATER | GREATER_EQUAL | LESS_EQUAL | LESS) Expr
AddBinExpr ::= Expr (PLUS | MINUS) Expr
MulBinExpr ::= Expr (STAR | SLASH | PERCENT) Expr
UnaryExpr ::= (PLUS | MINUS | NOT | EXCLAMATION) Expr
ItemAccessExpr ::= Expr (SQUARE_OPEN | INDEX_NULL_CHECK) Expr SQUARE_CLOSE
FieldAccessExpr ::= Expr (DOT | DOT_NULL_CHECK) IDENTIFIER_WORD
PrimaryExpr ::= ParenthesizedExpr | GlobalOrFunctionCallLike | ListExpr | ListComprehensionExpr | VariableReferenceIdentifier | Primitive

private GlobalOrFunctionCallLike ::= RecordExpr | MapExpr | FunctionCallExpr | ProtoInitializationExpr | GlobalExpr
private Primitive ::= NULL_LITERAL | BOOL_LITERAL | NumberLiteral | AnyStringLiteral

ParenthesizedExpr ::= PARENS_OPEN Expr PARENS_CLOSE
RecordExpr ::= RECORD PARENS_OPEN [CommaSeparatedRecordFieldValueList COMMA?] PARENS_CLOSE
MapExpr ::= MAP PARENS_OPEN [CommaSeparatedKeyValueList] PARENS_CLOSE
FunctionCallExpr ::= FunctionIdentifier PARENS_OPEN [CommaSeparatedExpressionList COMMA?] PARENS_CLOSE
ProtoInitializationExpr ::= FunctionIdentifier PARENS_OPEN CommaSeparatedRecordFieldValueList COMMA? PARENS_CLOSE
GlobalExpr ::= PlainIdentifier (DOT PlainIdentifier)*
ListExpr ::= SQUARE_OPEN [CommaSeparatedExpressionList COMMA?] SQUARE_CLOSE

ListComprehensionInList ::= IN Expr
ListComprehensionFilter ::= IF Expr
ListComprehensionExpr ::= SQUARE_OPEN Expr FOR VariableDefinitionIdentifier ListComprehensionInList ListComprehensionFilter? SQUARE_CLOSE {
  pin = 3
  implements = "com.google.bamboo.soy.elements.ListComprehensionExprElement"
}
