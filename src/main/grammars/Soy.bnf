{
  parserClass="com.google.bamboo.soy.parser.SoyParser"
  parserUtilClass="com.google.bamboo.soy.parser.SoyParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Soy"
  psiImplClassSuffix="Impl"
  psiPackage="com.google.bamboo.soy.parser"
  psiImplPackage="com.google.bamboo.soy.parser.impl"

  elementTypeHolderClass="com.google.bamboo.soy.parser.SoyTypes"
  elementTypeClass="com.google.bamboo.soy.parser.SoyElementType"
  tokenTypeClass="com.google.bamboo.soy.lexer.SoyTokenType"

  implements(".*Statement")="com.google.bamboo.soy.elements.StatementBase"

  extends(".*Expr|VariableReferenceIdentifier")=Expr
  consumeTokenMethod(".*Expr")="consumeTokenFast"

  tokens = [
    ALIAS = "alias"
    AMP_AMP = "&&"
    AND = "and"
    AS = "as"
    AT_PARAM = "@param"
    AT_PARAM_OPT = "@param?"
    AT_INJECT = "@inject"
    AT_INJECT_OPT = "@inject?"
    BOOL_LITERAL = "regexp:false|true"
    CALL = "call"
    CARRIAGE_RETURN = "\\r"
    CASE = "case"
    COLON = ":"
    COMMA = ","
    CSS="css"
    DEFAULT = "default"
    DELCALL = "delcall"
    DELPACKAGE = "delpackage"
    DELTEMPLATE = "deltemplate"
    DOLLAR = "$"
    DOT = "."
    DOT_NULL_CHECK = "?."
    ELSE = "else"
    ELSEIF = "elseif"
    END_CALL = "/call"
    END_DELCALL = "/delcall"
    END_DELTEMPLATE = "/deltemplate"
    END_FOR = "/for"
    END_FOREACH = "/foreach"
    END_IF = "/if"
    END_LET = "/let"
    END_LITERAL = "{/literal}"
    END_MSG = "/msg"
    END_PARAM = "/param"
    END_PLURAL = "/plural"
    END_SELECT = "/select"
    END_SWITCH = "/switch"
    END_TEMPLATE = "/template"
    EQUAL = "="
    EQUAL_EQUAL = "=="
    EXCLAMATION = "!"
    FALLBACKMSG = "fallbackmsg"
    FOR = "for"
    FOREACH = "foreach"
    GREATER = ">"
    GREATER_EQUAL = ">="
    IF = "if"
    IFEMPTY = "ifempty"
    IN = "in"
    INDEX_NULL_CHECK = "?["
    LB = "lb"
    LBRACE = "{"
    LBRACE_LBRACE = "{{"
    LESS = "<"
    LESS_EQUAL = "<="
    LET = "let"
    LITERAL = "{literal}"
    MINUS = "-"
    MSG = "msg"
    NAMESPACE = "namespace"
    NEWLINE_LITERAL = "\\n"
    NIL = "nil"
    NOT = "not"
    NOT_EQUAL = "!="
    OR = "or"
    PARAM = "param"
    PARENS_CLOSE = ")"
    PARENS_OPEN = "("
    PERCENT = "%"
    PIPE = "|"
    PIPE_PIPE = "||"
    PLURAL = "plural"
    PLUS = "+"
    PRINT = "print"
    QUESTIONMARK = "?"
    RB = "rb"
    RBRACE = "}"
    RBRACE_RBRACE = "}}"
    SELECT = "select"
    SLASH = "/"
    SLASH_RBRACE = "/}"
    SLASH_RBRACE_RBRACE = "/}}"
    SP = "sp"
    SQUARE_CLOSE = "]"
    SQUARE_OPEN = "["
    STAR = "*"
    SWITCH = "switch"
    TAB = "\\t"
    TEMPLATE = "template"
    TERNARY_COALESCER = "?:"
    TESTING_WHITESPACE = "regexp:[ \n\t\r\f]+"
    XID="xid"

    /* Types */
    ANY = "any"
    STRING = "string"
    BOOL = "bool"
    INT = "int"
    FLOAT = "float"
    NUMBER = "number"
    HTML = "html"
    URI = "uri"
    JS = "js"
    ATTRIBUTES = "attributes"
    LIST = "list"
    MAP = "map"

    DOC_COMMENT_BLOCK = "regexp:(/\**([^*]|(\*+[^*/]))*(\*+/))"
    COMMENT_BLOCK = "regexp:(/\*([^*]|(\*+[^*/]))*(\*+/))"
    HTML_COMMENT ="regexp:<!--([^\r\n]|(\r|\n|\r\n))*-->"

    IDENTIFIER_WORD = "regexp:[a-zA-Z_]([a-zA-Z_0-9])*"
    QUALIFIED_IDENTIFIER = "regexp:\.?[a-zA-Z_]([a-zA-Z_0-9])(\.[a-zA-Z_]([a-zA-Z_0-9]))*"
    CSS_IDENTIFIER_LITERAL = "regexp:%?[a-zA-Z_-]([a-zA-Z_0-9-])*"

    STRING_LITERAL = "regexp:'([^\r\n'\\]|\\.)*'"
    MULTI_LINE_STRING_LITERAL = "regexp:'([^'\\]|\\([^]))*'"

    INTEGER_LITERAL = "regexp:[0-9]+"
    FLOAT_LITERAL = "regexp:([0-9]+\.[0-9]+(e((\+|-)?[0-9]+))?)|([0-9]+(e((\+|-)?[0-9]+))?)"

    OTHER = "regexp:."
  ]
}

// Root rule

FileInput ::= BlockList

// Identifier

private KeywordsAllowedInIdentifiers ::=
    ANY | AS | ATTRIBUTES | BOOL | CSS | FLOAT | HTML | INT | JS | LB | LIST |
    MAP | MSG | NIL | NUMBER | PLURAL | RB | SP | STRING | URI | XID

// A single identifier token: foo, bar, any, int
private PlainIdentifier ::= IDENTIFIER_WORD | KeywordsAllowedInIdentifiers

// A variable reference: $foo, $bar, $template
private VariableIdentifier ::= DOLLAR IDENTIFIER_WORD {
  pin = 1;
}

private FieldAccess ::= (DOT | DOT_NULL_CHECK) IDENTIFIER_WORD {
  pin = 1
}

// A sequence of tokens representing namespace, template or function id: my.name.space, .template
private QualifiedIdentifier ::= QUALIFIED_IDENTIFIER

// A valid css identifier: dashes are allowed, dots are not: -foo-bar, %foo-bar, foo
CssIdentifier ::= CSS_IDENTIFIER_LITERAL | PlainIdentifier

// A lax rule for xid identifier: dashes are allowed, dots are allowed: %-foo.bar, %foo-bar, foo
// Should be caught by annotation.
XidIdentifier ::= (DOT? (CSS_IDENTIFIER_LITERAL | PlainIdentifier))+

TemplateDefinitionIdentifier ::= QualifiedIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.TemplateDefinitionMixin"
  implements="com.google.bamboo.soy.elements.TemplateDefinitionElement"
  stubClass = "com.google.bamboo.soy.stubs.TemplateDefinitionStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
}

TemplateReferenceIdentifier ::= QualifiedIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.IdentifierMixin"
  implements="com.google.bamboo.soy.elements.IdentifierElement"
  methods=[getReference]
}

VariableReferenceIdentifier ::= VariableIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.IdentifierMixin"
  implements="com.google.bamboo.soy.elements.IdentifierElement"
  methods=[getReference]
}

VariableDefinitionIdentifier ::= VariableIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.VariableDefinitionMixin"
  implements="com.google.bamboo.soy.elements.VariableDefinitionElement"
  methods=[setName getName]
}

ParamDefinitionIdentifier ::= PlainIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.VariableDefinitionMixin"
  implements="com.google.bamboo.soy.elements.VariableDefinitionElement"
  methods=[setName getName]
 }

ParamSpecificationIdentifier ::= PlainIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.ParamIdentifierMixin"
  implements="com.google.bamboo.soy.elements.ParamIdentifierElement"
  methods=[getReference]
}

NamespaceDeclarationIdentifier ::= QualifiedIdentifier {
  mixin="com.google.bamboo.soy.elements.impl.NamespaceDeclarationMixin"
  implements="com.google.bamboo.soy.elements.NamespaceDeclarationElement"
  stubClass = "com.google.bamboo.soy.stubs.NamespaceDeclarationStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
}

NamespaceIdentifier ::= QualifiedIdentifier

AliasIdentifier ::= QualifiedIdentifier

TypeIdentifier ::= PlainIdentifier

PackageIdentifier ::= QualifiedIdentifier

FieldIdentifier ::= PlainIdentifier

AttributeNameIdentifier ::= PlainIdentifier

FunctionIdentifier ::= PlainIdentifier

// Literals

ValueLiteral ::= NumberLiteral | AnyStringLiteral | BOOL_LITERAL

private NumberLiteral ::= INTEGER_LITERAL | FLOAT_LITERAL | DOT FLOAT_LITERAL

AnyStringLiteral ::= STRING_LITERAL | MULTI_LINE_STRING_LITERAL {
  mixin="com.google.bamboo.soy.elements.impl.IdentifierMixin"
  implements="com.google.bamboo.soy.elements.IdentifierElement"
  methods=[getReferences]
}

private recoverEndOfTag ::= !(LBRACE | LBRACE_LBRACE | LITERAL | LITERAL_DOUBLE | RBRACE | RBRACE_RBRACE | SLASH_RBRACE | SLASH_RBRACE_RBRACE)
private meta BracedTag ::= <<ClosedBracedTag <<p>>>> | <<OpenBracedTag <<p>>>>
private meta OpenBracedTag ::= <<SingleBracedOpenTagOuter <<p>>>> | <<DoubleBracedOpenTagOuter <<p>>>>
private meta ClosedBracedTag ::= <<SingleBracedClosedTag <<p>>>> | <<DoubleBracedClosedTag <<p>>>>
private meta SingleBracedOpenTagOuter ::= <<SingleBracedOpenTagInner <<p>>>> RBRACE {
  pin = 1
}
private meta SingleBracedOpenTagInner ::= LBRACE <<p>> {
  recoverWhile = "recoverEndOfTag"
}
private meta SingleBracedClosedTag ::= LBRACE <<p>> SLASH_RBRACE

private meta DoubleBracedOpenTagOuter ::= <<DoubleBracedOpenTagInner <<p>>>> RBRACE_RBRACE {
  pin = 1
}
private meta DoubleBracedOpenTagInner ::= LBRACE_LBRACE <<p>> {
  recoverWhile = "recoverEndOfTag"
}
private meta DoubleBracedClosedTag ::= LBRACE_LBRACE <<p>> SLASH_RBRACE_RBRACE

// Possible ending tags

EndCallTag ::= <<BracedTag END_CALL>>
EndDelCallTag ::= <<BracedTag END_DELCALL>>
EndDelTemplateTag ::= <<BracedTag END_DELTEMPLATE>>
EndForeachTag ::= <<BracedTag END_FOREACH>>
EndForTag ::= <<BracedTag END_FOR>>
EndIfTag ::= <<BracedTag END_IF>>
EndLetTag ::= <<BracedTag END_LET>>
EndMsgTag ::= <<BracedTag END_MSG>>
EndParamTag ::= <<BracedTag END_PARAM>>
EndPluralTag ::= <<BracedTag END_PLURAL>>
EndSelectTag ::= <<BracedTag END_SELECT>>
EndSwitchTag ::= <<BracedTag END_SWITCH>>
EndTemplateTag ::= <<BracedTag END_TEMPLATE>>

// Expanding on soy's hierarchical structure follows.

BlockList ::= (Block | OTHER | COMMENT_BLOCK | HTML_COMMENT)*

private Block ::= NamespaceBlock | AliasBlock | TemplateBlock | DelegatePackageBlock | CatchallBraces

CatchallBraces ::= <<BracedTag ()>>

// Namespace block

NamespaceBlock ::= <<BracedTag NamespaceTagBody>>

private NamespaceTagBody ::= NAMESPACE NamespaceDeclarationIdentifier [AttributeList] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Alias block

AliasBlock ::= <<BracedTag AliasBody>>

private AliasBody ::= ALIAS NamespaceIdentifier [AS AliasIdentifier] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Template block

TemplateBlock ::= LocalTemplateBlock | DelegateTemplateBlock {
  mixin="com.google.bamboo.soy.elements.impl.TemplateBlockMixin"
  implements="com.google.bamboo.soy.elements.TemplateBlockElement"
  stubClass = "com.google.bamboo.soy.stubs.TemplateBlockStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
}

private LocalTemplateBlock ::=
    BeginTemplate
    [AtParamList]
    [<<StatementList !()>>]
    EndTemplateTag {
  pin = 1
}

BeginTemplate ::= <<BracedTag BeginTemplateBody>>

private BeginTemplateBody ::= TEMPLATE (TemplateDefinitionIdentifier [AttributeList] | AttributeList) {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

private AtParamList ::= (AtParamSingle [DocComment]| AtInjectSingle [DocComment])+

AtParamSingle ::= <<BracedTag AtParamBody>> {
  implements = "com.google.bamboo.soy.elements.AtParamElement"
  mixin = "com.google.bamboo.soy.elements.impl.AtParamMixin"
  stubClass = "com.google.bamboo.soy.stubs.AtParamStub"
  elementTypeFactory = "com.google.bamboo.soy.stubs.StubFactory.getType"
}

DocComment ::= DOC_COMMENT_BLOCK

private AtParamBody ::= (AT_PARAM | AT_PARAM_OPT) ParamDefinitionIdentifier COLON TypeExpression {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

AtInjectSingle ::= <<BracedTag AtInjectBody>> {
  implements = "com.google.bamboo.soy.elements.AtInjectElement"
  mixin = "com.google.bamboo.soy.elements.impl.AtInjectMixin"
}

private AtInjectBody ::= (AT_INJECT | AT_INJECT_OPT) ParamDefinitionIdentifier COLON TypeExpression {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

TypeExpression ::= UnionType | CompoundType | PrimitiveType

PrimitiveType
  ::=
    ANY | STRING | BOOL | INT | FLOAT | NUMBER | HTML | NULL | QUESTIONMARK |
    URI | JS | ATTRIBUTES | TypeIdentifier

CompoundType ::= ListType | MapType | RecordType

ListType ::= LIST LESS TypeExpression GREATER {
  pin = 2
}

MapType ::= MAP LESS TypeExpression COMMA TypeExpression GREATER {
  pin = 2
}

UnionType ::= (CompoundType | PrimitiveType) PIPE TypeExpression {
  pin = 2
}

RecordType ::= SQUARE_OPEN RecordTypeField (COMMA RecordTypeField)* SQUARE_CLOSE {
  pin = 1
}

RecordTypeField ::= FieldIdentifier COLON TypeExpression {
  pin = 2
}

// DelTemplate block

private DelegateTemplateBlock ::=
    BeginDelegateTemplate
    [AtParamList]
    [<<StatementList !()>>]
    EndDelTemplateTag {
  pin = 1
}

BeginDelegateTemplate ::= <<BracedTag BeginDelegateTemplateBody>>

private BeginDelegateTemplateBody ::= DELTEMPLATE TemplateDefinitionIdentifier [AttributeList] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// DelPackage block

DelegatePackageBlock ::= <<BracedTag DelegatePackageTagBody>>

private DelegatePackageTagBody ::= DELPACKAGE PackageIdentifier {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Attribute lists

private AttributeList ::= AttributeKeyValuePair+

AttributeKeyValuePair ::= AttributeNameIdentifier EQUAL AnyStringLiteral {
  pin = 2
}

// Statements

external endOfStatementBlock ::= parseEndOfStatementBlock

// Should consume everything until the provided threshold rule or any end tag.
// Should only expect statements.
// Should (ideally) mark everything else as an error.
meta StatementList ::= (Statement | !(<<p>> | endOfStatementBlock) CatchallBraces)+ {
  recoverWhile = "!(<<p>> | endOfStatementBlock)"
  implements = "com.google.bamboo.soy.elements.StatementListElement"
  mixin = "com.google.bamboo.soy.elements.impl.StatementListMixin"
}

// ! It is very important to have the following structure
// StatementList
// |- OTHER
// |- Some other statement
// for the formatter to work, see SoyFormattingModelBuilder
//
// Please do not change the visibility of these rules, unless you are sure
// what you are doing.

private Content ::= OTHER

private Statement ::=
    DirectCallStatement
  |
    DelCallStatement
  |
    CssStatement
  |
    ForStatement
  |
    ForeachStatement
  |
    IfStatement
  |
    LbStatement
  |
    LetSingleStatement
  |
    LetCompoundStatement
  |
    LiteralStatement
  |
    MsgStatement
  |
    NilStatement
  |
    PluralStatement
  |
    XidStatement
  |
    RbStatement
  |
    SelectStatement
  |
    SpStatement
  |
    SwitchStatement
  |
    WhitespaceStatement
  |
    PrintStatement
  |
    Content

// A wrapper for [StatementList] that parses all statements in an unexpected context.

meta UnexpectedStatements ::= <<StatementList (<<p>>)>>

// For

ForStatement
  ::= BeginFor
    [<<StatementList !()>>]
    EndForTag {
  pin = 1
  implements = "com.google.bamboo.soy.elements.ForStatementElement"
  mixin = "com.google.bamboo.soy.elements.impl.ForStatementMixin"
}

BeginFor ::= <<BracedTag BeginForTagBody>>

private BeginForTagBody ::= FOR VariableDefinitionIdentifier IN Expr {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Foreach

ForeachStatement
  ::=
    BeginForeach
      [<<StatementList (IfEmptyTag)>>]
    [IfEmptyTag
      [<<StatementList !()>>]]
    EndForeachTag {
  pin = 1
  implements = "com.google.bamboo.soy.elements.ForeachStatementElement"
  mixin = "com.google.bamboo.soy.elements.impl.ForeachStatementMixin"
}

IfEmptyTag ::= <<BracedTag IFEMPTY>>

BeginForeach ::= <<BracedTag BeginForeachTagBody>>

private BeginForeachTagBody ::= FOREACH VariableDefinitionIdentifier IN Expr {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// If

IfStatement
  ::=
    BeginIf
    [<<StatementList (ElseTag | BeginElseIf)>>]
    [ElseIfClauseList]
    [ElseTag [<<StatementList !()>>]]
    EndIfTag {
  pin = 1
}

BeginIf ::= <<BracedTag BeginIfTagBody>>

private BeginIfTagBody ::= IF Expr {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

private ElseIfClauseList
  ::=
    BeginElseIf
      [<<StatementList (ElseTag | BeginElseIf)>>]
    [ElseIfClauseList] {
  pin = 1
}

BeginElseIf ::= <<BracedTag BeginElseIfTagBody>>

private BeginElseIfTagBody ::= ELSEIF Expr {
  pin = 1
}

ElseTag ::= <<BracedTag ELSE>>



/*
 * CALL STATEMENTS
 */

// Direct call

DirectCallStatement ::=
    !<<ClosedBracedTag BeginCallTagBody>> DirectCallStatementBlock
  | BeginCall {
  implements="com.google.bamboo.soy.elements.CallStatementBase"
}

private DirectCallStatementBlock ::= BeginCall ParamList EndCallTag {
  pin = 1
}

BeginCall ::= <<BracedTag BeginCallTagBody>> {
  implements="com.google.bamboo.soy.elements.BeginCallBase"
}

private BeginCallTagBody ::= CALL (TemplateReferenceIdentifier [AttributeList] | AttributeList) {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// DelCall

DelCallStatement ::=
    !<<ClosedBracedTag BeginDelCallTagBody>> DelCallStatementBlock
  | BeginDelCall {
  implements="com.google.bamboo.soy.elements.DelCallStatementBase"
}

private DelCallStatementBlock ::= BeginDelCall ParamList EndDelCallTag {
  pin = 1
}

BeginDelCall ::= <<BracedTag BeginDelCallTagBody>> {
  implements="com.google.bamboo.soy.elements.BeginCallBase"
}

private BeginDelCallTagBody ::= DELCALL TemplateReferenceIdentifier [AttributeList] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// ParamList
private ParamList ::= (ParamListElement | <<UnexpectedStatements (BeginParamTag)>>)*

ParamListElement
  ::=
    BeginParamTag
    [ParamListElementBody | EndParamTag] {
  pin = 1
  // Ideally, should be useless and parsed by [ParamListElementBody]
  recoverWhile = "!(BeginParamTag | endOfStatementBlock)"
  implements = "com.google.bamboo.soy.elements.ParamListElementBase"
}

private ParamListElementBody ::= <<StatementList (BeginParamTag)>> EndParamTag {
  pin = 1
}

BeginParamTag ::= <<BracedTag BeginParamTagBody>>

private BeginParamTagBody ::= PARAM (ParamSpecificationIdentifier COLON Expr | AttributeList | ParamSpecificationIdentifier [AttributeList]) {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}



/*
 * MULTIPLE CHOICE STATEMENTS
 */

// Plural statement

PluralStatement ::= BeginPlural CaseAndDefaultClauses EndPluralTag {
  pin = 1
  implements="com.google.bamboo.soy.elements.ChoiceStatementBaseElement"
}

BeginPlural ::= <<BracedTag BeginPluralTagBody>>

private BeginPluralTagBody ::= PLURAL Expr [AttributeKeyValuePair] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Switch statement

SwitchStatement ::= BeginSwitch CaseAndDefaultClauses EndSwitchTag {
  pin = 1
  implements="com.google.bamboo.soy.elements.ChoiceStatementBaseElement"
}

BeginSwitch ::= <<BracedTag BeginSwitchTagBody>>

private BeginSwitchTagBody ::= SWITCH Expr {
  pin = 1
}

// Select statement

SelectStatement ::= BeginSelectStatement CaseAndDefaultClauses EndSelectTag {
  pin = 1
  implements="com.google.bamboo.soy.elements.ChoiceStatementBaseElement"
}

BeginSelectStatement ::= <<BracedTag BeginSelectStatementTagBody>>

private BeginSelectStatementTagBody ::= SELECT Expr {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Case and default clauses

// Statements are only "unexpected" before the first {case} or {default} tag. After that they are
// consumed by the appropriate *Clause rule.

private CaseAndDefaultClauses
  ::=
    [<<UnexpectedStatements (BeginCaseClause | DefaultTag)>>]
    (CaseClause | DefaultClause)*

CaseClause ::= BeginCaseClause [<<StatementList (BeginCaseClause | DefaultTag)>>] {
  pin = 1
}

BeginCaseClause ::= <<BracedTag BeginCaseClauseTagBody>>

private BeginCaseClauseTagBody ::= CASE CommaSeparatedExpressionList {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

DefaultClause ::= DefaultTag [<<StatementList (BeginCaseClause | DefaultTag)>>] {
  pin = 1
}

DefaultTag ::= <<BracedTag DEFAULT>>



/*
 * SIMPLE STATEMENTS
 */

// Css statement

CssStatement ::= <<BracedTag CssStatementTagBody>>

private CssStatementTagBody ::= CSS CssIdentifier

// Xid statement

XidStatement ::= <<BracedTag XidStatementTagBody>>

private XidStatementTagBody ::= XID XidIdentifier

// Let statement

LetSingleStatement ::= <<BracedTag LetSingleTagBody>>

private LetSingleTagBody ::= LET VariableDefinitionIdentifier COLON Expr {
  pin = 3
  recoverWhile = "recoverEndOfTag"
}

LetCompoundStatement ::= BeginLet [<<StatementList !()>>] EndLetTag {
  pin = 1
}

BeginLet ::= <<BracedTag BeginLetTagBody>>

private BeginLetTagBody ::= LET VariableDefinitionIdentifier [AttributeKeyValuePair] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

// Literal statement

LiteralStatement ::= (LITERAL Content END_LITERAL) | (LITERAL_DOUBLE Content END_LITERAL_DOUBLE)

// Msg statement

MsgStatement
  ::=
    BeginMsg
      [<<StatementList (FallbackMsgClause)>>]
    [FallbackMsgClause
      [<<StatementList !()>>]]
    EndMsgTag {
  pin = 1
  implements="com.google.bamboo.soy.elements.MsgStatement"
}

BeginMsg ::= <<BracedTag BeginMsgTagBody>>

private BeginMsgTagBody ::= MSG AttributeList {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

FallbackMsgClause ::= <<BracedTag FallbackMsgTagBody>>

private FallbackMsgTagBody ::= FALLBACKMSG AttributeList {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

LbStatement ::= <<BracedTag LB>>

NilStatement ::= <<BracedTag NIL>>

RbStatement ::= <<BracedTag RB>>

SpStatement ::= <<BracedTag SP>>

// Print statement

PrintStatement ::= <<BracedTag PrintBody>>

private PrintBody ::= ImplicitPrintBody | ExplicitPrintBody

private ExplicitPrintBody ::= PRINT Expr [PIPE DirectiveList] {
  pin = 1
  recoverWhile = "recoverEndOfTag"
}

private ImplicitPrintBody ::= Expr [PIPE DirectiveList] [AttributeKeyValuePair]

private DirectiveList ::= Directive (PIPE Directive)*

Directive
  ::=
    FunctionIdentifier
  |
    FunctionIdentifier COLON ValueLiteral (COMMA ValueLiteral)*

CommaSeparatedExpressionList ::= Expr (COMMA Expr)* COMMA?

// Whitespace statement

WhitespaceStatement ::= <<BracedTag TAB>>|<<BracedTag NEWLINE_LITERAL>>|<<BracedTag CARRIAGE_RETURN>>

// Expressions
// https://developers.google.com/closure/templates/docs/concepts#expressions
// https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities
Expr ::= NullCheckTernaryExpr
  | NullCheckBinExpr
  | OrBinExpr
  | AndBinExpr
  | BoolOrBinExpr
  | BoolAndBinExpr
  | CompBinExpr
  | RelCompBinExpr
  | AddBinExpr
  | MulBinExpr
  | UnaryExpr
  | AtomExpr

private AtomExpr ::= VariableReferenceIdentifier
  | LiteralExpr
  | FunctionCallExpr
  | FieldExpr
  | IndexExpr
  | ListExpr
  | ParenthesizedExpr

LiteralExpr ::= NumberLiteral | AnyStringLiteral

NullCheckTernaryExpr ::= Expr QUESTIONMARK Expr COLON Expr
NullCheckBinExpr ::= Expr TERNARY_COALESCER Expr
OrBinExpr ::= Expr OR Expr
AndBinExpr ::= Expr AND Expr
BoolOrBinExpr ::= Expr PIPE_PIPE Expr
BoolAndBinExpr ::= Expr AMP_AMP Expr
CompBinExpr ::= Expr (EQUAL_EQUAL | NOT_EQUAL) Expr
RelCompBinExpr ::= Expr (GREATER | GREATER_EQUAL | LESS_EQUAL | LESS) Expr
AddBinExpr ::= Expr (PLUS | MINUS) Expr
MulBinExpr ::= Expr (STAR | SLASH | PERCENT) Expr
UnaryExpr ::= (PLUS | MINUS | NOT | EXCLAMATION) Expr

FunctionCallExpr ::= FunctionIdentifier PARENS_OPEN [CommaSeparatedExpressionList] PARENS_CLOSE
FieldExpr ::= Expr FieldAccess
IndexExpr ::= Expr (SQUARE_OPEN | INDEX_NULL_CHECK) [CommaSeparatedExpressionList] SQUARE_CLOSE
ListExpr ::= SQUARE_OPEN [CommaSeparatedExpressionList] SQUARE_CLOSE
ParenthesizedExpr ::= PARENS_OPEN Expr PARENS_CLOSE
