buildscript {
    repositories {
        maven { url 'https://jitpack.io' }
    }
}

plugins {
    id 'org.jetbrains.grammarkit' version '2021.1.3'
    id 'org.jetbrains.intellij' version '0.7.3'
    id 'org.jetbrains.kotlin.jvm' version '1.5.0'
    id 'org.kordamp.gradle.markdown' version '2.0.0'
}

repositories {
    jcenter()
}

dependencies {
    implementation('com.rollbar:rollbar-api:1.7.8') {
        exclude group: 'org.slf4j'
    }
    implementation('com.rollbar:rollbar-java:1.7.8') {
        exclude group: 'org.slf4j'
    }
    testImplementation('junit:junit:4.12')
    testImplementation('org.assertj:assertj-core:3.8.0')
}

ext {
    tmpMarkdownInputDir = "${buildDir}/tmp/markdown-inputs".toString()
    htmlOutputDir = "${buildDir}/gen-html".toString()
    pluginVersion = '1.6.6'

    // Make sure |ext.pluginSinceBuild| is consistent with |intellij.version|.
    pluginSinceBuild = '203'
    pluginUntilBuild = ''
    patchPluginXmlVersion = patchPluginXmlVersion()
}

String patchPluginXmlVersion() {
    assert pluginSinceBuild != ''
    return "${pluginVersion}-${pluginSinceBuild}${pluginUntilBuild == '' ? '' : '-' + pluginUntilBuild}"
}

intellij {
    // Make sure |version| is consistent with |ext.pluginSinceBuild|.
    version 'IC-2020.3'

    // |version| is visible in the format 'xxxx.y'
    assert pluginSinceBuild.substring(0, 3) == version.substring(2, 6).replace('.', '')
    updateSinceUntilBuild true
    pluginName project.name + '-' + patchPluginXmlVersion
}

task prepareMarkdownInputs(type: Copy) {
    from("${projectDir}") {
        include 'releasenotes.md'
    }
    into tmpMarkdownInputDir
}

markdownToHtml {
    dependsOn prepareMarkdownInputs
    sourceDir = new File(tmpMarkdownInputDir)
    outputDir = new File(htmlOutputDir)
    inputEncoding = 'UTF-8'
    outputEncoding = 'UTF-8'
}

sourceSets {
    main {
        java.srcDirs += 'gen'
        kotlin.srcDirs += 'gen'
    }
    test {
        java.srcDir 'src/test/java'
    }
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }

    beforeSuite { suite ->
        if (suite.className != null) {
            println()
            println(suite.className)
        }
    }
    afterTest { desc, result ->
        System.out.flush()
    }
    afterSuite { println() }
}

apply plugin: 'org.jetbrains.grammarkit'

import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

task generateSoyLexer(type: GenerateLexer) {
    source 'src/main/grammars/Soy.flex'
    skeleton 'src/main/grammars/flex.skeleton'
    targetDir 'gen/com/google/bamboo/soy/lexer/'
    targetClass 'SoyFlexLexer'
    purgeOldFiles true
}

task generateSoyParser(type: GenerateParser) {
    source 'src/main/grammars/Soy.bnf'
    targetRoot 'gen'
    pathToParser 'com/google/bamboo/soy/parser/SoyParser.java'
    pathToPsiRoot 'com/google/bamboo/soy/parser/'
    purgeOldFiles true
}

compileJava {
    dependsOn generateSoyLexer
    dependsOn generateSoyParser
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        apiVersion = '1.4'
    }
    dependsOn generateSoyLexer
    dependsOn generateSoyParser
}

def readChangeNotes() {
    def lines = new File(htmlOutputDir, 'releasenotes.html').readLines()

    // Drop the top-level "Release notes" header.
    return lines[1..lines.size - 1].join('\n')
}

patchPluginXml {
    dependsOn markdownToHtml
    version patchPluginXmlVersion
    sinceBuild pluginSinceBuild
    untilBuild pluginUntilBuild
    changeNotes { readChangeNotes() }
}
